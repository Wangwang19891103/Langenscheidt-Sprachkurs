//
//  UserDataManager.m
//  Langenscheidt-Sprachkurs
//
//  Created by Stefan Ueter on 08.04.16.
//  Copyright Â© 2016 mobilinga. All rights reserved.
//

#import "UserDataManager.h"


/*
 * + populate a lesson with all pearls, clusters (reason: determining when a lesson has been completed (all clusters))
 * ? number of solved clusters depending on comparing cluster.run vs lesson.run? (solved state must be reset when new run starts?)
 * ? when a new lesson run starts (number of solved pearls,clusters also reset VISUALLY in the bar) shud the run of the lesson (and thus all clusters) be equal to the currently TOP run of the most ran cluster? because otherwise if theres a cluster thats been ran 10 times it would not be fully reset for a long time
 * -> ? shud the lesson have its own "run" attribute that would be equal to the top run?
 * ! do not increase run on cluster everytime its completed, but instead put it on lesson.run + 1
 *
 */



//#define AUTOGENERATED_EXERCISE_CLUSTER_ID       1000000



@implementation UserDataManager

@synthesize dataManager;


- (id) init {
    
    self = [super init];
    
    dataManager = [DataManager instanceNamed:@"user"];
    
    return self;
}


+ (id) instance {
    
    static UserDataManager* __instance = nil;
    
    @synchronized(self) {
        
        if (!__instance) {
            
            __instance = [[UserDataManager alloc] init];
        }
    }
    
    return __instance;
}



#pragma mark - Populate

// important for associating the UserCourses to the lessons

// todo: reset MOC after populating... remove all managed objects which waste space

//- (void) populateForLanguage {
//    
//    NSArray* courses = [[ContentDataManager instance] courses];
//    
//    for (Course* course in courses) {
//        
//        UserCourse* userCourse = [self _userCourseWithID:course.id];
//        
//        NSArray* lessons = [[ContentDataManager instance] lessonsForCourse:course];
//        
//        for (Lesson* lesson in lessons) {
//            
//            UserLesson* userLesson = [self _userLessonWithID:lesson.id];
//            userLesson.course = userCourse;
//            
//            NSArray* pearls = [[ContentDataManager instance] pearlsForLesson:lesson];
//            
//            for (Pearl* pearl in pearls) {
//                
//                UserPearl* userPearl = [self _userPearlForPearl:pearl];
//                
//                NSArray* exerciseClusters = [[ContentDataManager instance] exerciseClustersForPearl:pearl];
//                
//                for (ExerciseCluster* exerciseCluster in exerciseClusters) {
//                    
//                    UserExerciseCluster* userExerciseCluster = [self _userExerciseClusterForExerciseCluster:exerciseCluster];
//                }
//            }
//        }
//    }
//    
//    [self.dataManager save];
//}


- (void) populateStructureAndTeaserContent {
    
    NSLog(@"populating structure and teaser content");
    
    NSArray* courses = [[ContentDataManager instance] courses];
    
    for (Course* course in courses) {
        
        UserCourse* userCourse = [self _createUserCourseWithID:course.id];
        
        NSArray* lessons = [[ContentDataManager instance] lessonsForCourse:course];
        
        for (Lesson* lesson in lessons) {
            
            UserLesson* userLesson = [self _createUserLessonWithID:lesson.id];
            userLesson.course = userCourse;
            
            NSArray* pearls = [[ContentDataManager instance] pearlsForLesson:lesson];
            
            for (Pearl* pearl in pearls) {
                
                UserPearl* userPearl = [self _createUserPearlForPearl:pearl];
                userPearl.lesson = userLesson;
                
                NSArray* clusters = [[ContentDataManager instance] exerciseClustersForPearl:pearl];
                
                for (ExerciseCluster* cluster in clusters) {
                    
                    UserExerciseCluster* userExerciseCluster = [self _createUserExerciseClusterForExerciseCluster:cluster];
                    userExerciseCluster.pearl = userPearl;
                }
            }
        }
    }
    
    [self.dataManager save];
    
    
    NSLog(@"done.");
}


- (void) populateForCourse:(Course *)course {
    
    UserCourse* userCourse = [self _userCourseWithID:course.id];
    
    NSArray* lessons = [[ContentDataManager instance] lessonsForCourse:course];
    
    for (Lesson* lesson in lessons) {
        
        UserLesson* userLesson = [self _userLessonWithID:lesson.id];
        userLesson.course = userCourse;
        
        NSArray* pearls = [[ContentDataManager instance] pearlsForLesson:lesson];
        
        for (Pearl* pearl in pearls) {
            
            UserPearl* userPearl = [self _userPearlForPearl:pearl];
            
            NSArray* exerciseClusters = [[ContentDataManager instance] exerciseClustersForPearl:pearl];
            
            for (ExerciseCluster* exerciseCluster in exerciseClusters) {
                
                UserExerciseCluster* userExerciseCluster = [self _userExerciseClusterForExerciseCluster:exerciseCluster];
            }
        }
    }
    
    [self.dataManager save];
}




#pragma mark - Score

- (NSInteger) scoreForLanguage {

    NSArray* courses = [[ContentDataManager instance] courses];
    NSInteger score = 0;
    
    for (Course* course in courses) {
        
        NSInteger scoreForCourse = [self scoreForCourse:course];
        score += scoreForCourse;
    }
    
    return score;
}


- (NSInteger) scoreForCourse:(Course*) course {

    UserCourse* userCourse = [self _userCourseWithID:course.id];
    
    return userCourse.score;
}


- (NSInteger) scoreForLesson:(Lesson*) lesson {
    
    UserLesson* userLesson = [self _userLessonWithID:lesson.id];
    
    return userLesson.score;
}


- (NSInteger) scoreForPearl:(Pearl*) pearl {
    
    UserPearl* userPearl = [self _userPearlForPearl:pearl];
    
    return userPearl.score;
}


- (void) increaseScore:(NSInteger) score forExerciseCluster:(ExerciseCluster*) exerciseCluster {
    
    UserExerciseCluster* userExerciseCluster = [self _userExerciseClusterForExerciseCluster:exerciseCluster];
//    userExerciseCluster.score += score;
    
    NSInteger newScore = userExerciseCluster.score + score;
    
    [self setScore:newScore forExerciseCluster:userExerciseCluster];  // triggers cache dirty on parent tree
    
    Pearl* pearl = [[ContentDataManager instance] pearlForExerciseCluster:exerciseCluster];
    UserLesson* userLesson = [self _userLessonWithID:pearl.lesson.id];
    NSInteger lessonRun = userLesson.run;
    userExerciseCluster.run = lessonRun;  // completed for lesson's current run

    
    
    [self.dataManager save];
}


- (void) setScore:(NSInteger) score forExerciseCluster:(UserExerciseCluster*) userExerciseCluster {
    
    userExerciseCluster.score = score;
    
    [self.dataManager save];
    
//    userExerciseCluster.pearl.dirty = YES;
//    userExerciseCluster.pearl.lesson.dirty = YES;
    
    [self _resolvedScoreForParentTreeOfExerciseCluster:userExerciseCluster];
}



#pragma mark - Resolve Score

- (void) _resolvedScoreForParentTreeOfExerciseCluster:(UserExerciseCluster*) userExerciseCluster {
    
    [self _resolveScoreForUserPearl:userExerciseCluster.pearl];
    [self _resolveScoreForUserLesson:userExerciseCluster.pearl.lesson];
    [self _resolveScoreForUserCourse:userExerciseCluster.pearl.lesson.course];
}


- (void) _resolveScoreForUserPearl:(UserPearl*) userPearl {
   
    NSInteger sum = (NSInteger)[self.dataManager calculateSumForEntityName:@"UserExerciseCluster" withPredicate:[NSPredicate predicateWithFormat:@"pearl == %@", userPearl] attribute:@"score"];
    
    userPearl.score = sum;
    
    [self.dataManager save];
}


- (void) _resolveScoreForUserLesson:(UserLesson*) userLesson {
    
    NSInteger sum = (NSInteger)[self.dataManager calculateSumForEntityName:@"UserPearl" withPredicate:[NSPredicate predicateWithFormat:@"lesson == %@", userLesson] attribute:@"score"];
    
    userLesson.score = sum;

    [self.dataManager save];

}


- (void) _resolveScoreForUserCourse:(UserCourse*) userCourse {
    
    NSInteger sum = (NSInteger)[self.dataManager calculateSumForEntityName:@"UserLesson" withPredicate:[NSPredicate predicateWithFormat:@"course == %@", userCourse] attribute:@"score"];
    
    userCourse.score = sum;

    [self.dataManager save];

}



#pragma mark - ExerciseClusterEvent

- (void) addExerciseClusterEventWithScore:(NSInteger) score maxScore:(NSInteger) maxScore forExerciseCluster:(ExerciseCluster*) exerciseCluster {
    
    UserExerciseClusterEvent* userExerciseClusterEvent = [self.dataManager insertNewObjectForEntityName:@"UserExerciseClusterEvent"];
    UserExerciseCluster* userExerciseCluster = [self _userExerciseClusterForExerciseCluster:exerciseCluster];
    userExerciseClusterEvent.cluster = userExerciseCluster;
    userExerciseClusterEvent.score = score;
    userExerciseClusterEvent.maxScore = maxScore;
    userExerciseClusterEvent.run = userExerciseCluster.pearl.lesson.run;
    
    NSDate* date = [NSDate date];
    NSTimeInterval timeInterval = date.timeIntervalSince1970;
    
    userExerciseClusterEvent.date = timeInterval;
    
    [self.dataManager save];
}


- (NSArray*) userExerciseClusterEventsForCurrentRunForPearl:(Pearl*) pearl latest:(BOOL) latest {
    
    UserPearl* userPearl = [self _userPearlForPearl:pearl];
    NSInteger lessonRun = userPearl.lesson.run;
    
    NSArray* events = nil;
    
    if (latest) {
        
        NSMutableArray* latestEvents = [NSMutableArray array];
        
        NSArray* clusters = [self.dataManager fetchDataForEntityName:@"UserExerciseCluster" withPredicate:[NSPredicate predicateWithFormat:@"pearl == %@", userPearl] sortedBy:@"id", nil];
        
        for (UserExerciseCluster* cluster in clusters) {
            
            NSArray* events = [self.dataManager fetchDataForEntityName:@"UserExerciseClusterEvent" withPredicate:[NSPredicate predicateWithFormat:@"cluster == %@", cluster] sortedBy:@"date", nil];
            
            UserExerciseClusterEvent* latestEvent = events.lastObject;
            
            if (latestEvent) {
            
                [latestEvents addObject:latestEvent];
            }
        }
        
        events = latestEvents;
    }
    else {
        
        events = [self.dataManager fetchDataForEntityName:@"UserExerciseClusterEvent" withPredicate:[NSPredicate predicateWithFormat:@"cluster.pearl == %@ AND run == %d", userPearl, lessonRun] sortedBy:@"cluster.id", nil];
    }
    
    
    return events;
}






#pragma mark - Number of solved lessons, pearls, exerciseClusters

- (NSInteger) numberOfSolvedLessonsForCourse:(Course*) course {
    
    NSArray* lessons = [[ContentDataManager instance] lessonsForCourse:course];
    NSInteger numberOfSolvedLessons = 0;
    
    for (Lesson* lesson in lessons) {
        
        NSInteger numberOfSolvedPearls = [self numberOfSolvedPearlsForLesson:lesson];
        NSInteger numberOfAvailablePearls = [[[ContentDataManager instance] pearlsForLesson:lesson] count];
        
        NSAssert(numberOfSolvedPearls <= numberOfAvailablePearls, @"");
        
        if (numberOfSolvedPearls == numberOfAvailablePearls) {
            
            numberOfSolvedLessons++;
        }
    }
    
    return numberOfSolvedLessons;
}


//- (NSInteger) numberOfSolvedPearlsForLesson_OLD:(Lesson*) lesson {
//    
//    NSArray* pearls = [[ContentDataManager instance] pearlsForLesson:lesson];
//    NSInteger numberOfSolvedPearls = 0;
//    
//    for (Pearl* pearl in pearls) {
//        
//        NSInteger numberOfSolvedExerciseClusters = [self numberOfSolvedExerciseClustersForPearl:pearl];
//        NSInteger numberOfAvailableExerciseClusters = [self numberOfAvailableExerciseClustersForPearl:pearl];
//        
//        NSAssert(numberOfSolvedExerciseClusters <= numberOfAvailableExerciseClusters, @"");
//        
//        if (numberOfSolvedExerciseClusters == numberOfAvailableExerciseClusters) {
//            
//            numberOfSolvedPearls++;
//        }
//    }
//    
//    return numberOfSolvedPearls;
//}


- (NSInteger) numberOfSolvedPearlsForLesson:(Lesson *)lesson {
    
    // iterate pearls
    // number of solved clusters
    // - compare run to lesson run -> if greate or equal then include
    // number of total clusters
    // compare both -> if equal then include
    
    NSString* predicateString1 =
    @"lesson.id == %ld AND "
    "SUBQUERY(clusters, $cluster, $cluster.run >= $cluster.pearl.lesson.run).@count == "
    "SUBQUERY(clusters, $cluster, $cluster != nil).@count AND "
    "clusters.@count > 0"
    ;
    
    NSArray* solvedPearls = [self.dataManager fetchDataForEntityName:@"UserPearl" withPredicate:[NSPredicate predicateWithFormat:predicateString1, lesson.id] sortedBy:nil];
    
    return solvedPearls.count;
}


- (NSInteger) numberOfsolvedExerciseClustersForLesson:(Lesson*) lesson {

    NSString* predicateString1 =
    @"pearl.lesson.id == %ld AND "
    "run >= pearl.lesson.run"
    ;
    
    NSArray* solvedClusters = [self.dataManager fetchDataForEntityName:@"UserExerciseCluster" withPredicate:[NSPredicate predicateWithFormat:predicateString1, lesson.id] sortedBy:nil];
    
    return solvedClusters.count;

}


- (NSInteger) numberOfSolvedExerciseClustersForCourse:(Course*) course {
    
    // all clusters whose pearl.lesson.course has the same id (clusters are from the course)
    // clusters are solved, i.e. their run is the same or higher (>=) as the run of the respective lesson in the course
    
    NSString* predicateString1 =
    @"pearl.lesson.course.id == %ld AND "
    "run >= pearl.lesson.run"
    ;
    
    NSArray* solvedClusters = [self.dataManager fetchDataForEntityName:@"UserExerciseCluster" withPredicate:[NSPredicate predicateWithFormat:predicateString1, course.id] sortedBy:nil];
    
    return solvedClusters.count;
}


- (NSInteger) numberOfSolvedExerciseClustersForPearl:(Pearl*) pearl {
    
    UserPearl* userPearl = [self _userPearlForPearl:pearl];
    NSArray* userExerciseClusters = [self _userExerciseClustersForPearl:userPearl];
    NSInteger numberOfSolvedExerciseClusters = 0;
    UserLesson* userLesson = [self _userLessonWithID:pearl.lesson.id];
    NSInteger lessonRun = userLesson.run;
    
    for (UserExerciseCluster* userExerciseCluster in userExerciseClusters) {
        
        if (userExerciseCluster.run >= lessonRun) {
            
            ++numberOfSolvedExerciseClusters;
        }
    }
    
    return numberOfSolvedExerciseClusters;
}




- (BOOL) isLessonNewForCurrentRun_OLD:(Lesson*) lesson {

    NSArray* pearls = [[ContentDataManager instance] pearlsForLesson:lesson];
    BOOL isNew = YES;
    
    for (Pearl* pearl in pearls) {
        
        NSInteger numberOfSolvedExerciseClusters = [self numberOfSolvedExerciseClustersForPearl:pearl];
        
        if (numberOfSolvedExerciseClusters > 0) {
            
            isNew = NO;
            break;
        }
    }
    
    return isNew;
}


- (BOOL) isLessonNewForCurrentRun:(Lesson *)lesson {
    
    // iterate pearls
    // number of solved clusters
    // if number is > 0 -> return NO else YES
    
    NSInteger numberOfSolvedExerciseClusters = [self numberOfsolvedExerciseClustersForLesson:lesson];
    
    BOOL isNew = (numberOfSolvedExerciseClusters == 0);
    
    return isNew;
}


- (BOOL) isCourseNewForCurrentRun:(Course*) course {
    
    NSInteger numberOfSolvedExerciseClusters = [self numberOfSolvedExerciseClustersForCourse:course];
    
    BOOL isNew = (numberOfSolvedExerciseClusters == 0);
    
    return isNew;
}



- (NSInteger) numberOfAvailableExerciseClustersForPearl:(Pearl*) pearl {
    
    NSInteger numberOfAvailableExerciseClustersInContent = [[[ContentDataManager instance] exerciseClustersForPearl:pearl] count];
    
    UserPearl* userPearl = [self _userPearlForPearl:pearl];
    NSInteger numberOfAvailableExerciseClustersInUser = [[self.dataManager fetchDataForEntityName:@"UserExerciseCluster" withPredicate:[NSPredicate predicateWithFormat:@"pearl == %@", userPearl] sortedBy:nil] count];
    
    NSInteger numberOfAvailableExerciseClusters = MAX(numberOfAvailableExerciseClustersInContent, numberOfAvailableExerciseClustersInUser);

    return numberOfAvailableExerciseClusters;
}



//#pragma mark - Populate autogenerated exercises
//
//- (void) populateWithAutogeneratedExerciseWithClusterIDIfNeeded:(int32_t) exerciseClusterID inPearl:(Pearl*) pearl {
//
//    UserPearl* userPearl = [self _userPearlForPearl:pearl];
//    
//    
//    NSArray* results = [self.dataManager fetchDataForEntityName:@"UserExerciseCluster" withPredicate:[NSPredicate predicateWithFormat:@"id == %d AND pearl == %@", exerciseClusterID, userPearl] sortedBy:nil];
//    
//    UserExerciseCluster* userExerciseCluster = results.firstObject;
//    
//    
//    if (!userExerciseCluster) {
//    
//        userExerciseCluster = [self.dataManager insertNewObjectForEntityName:@"UserExerciseCluster"];
//        userExerciseCluster.id = exerciseClusterID;
//        userExerciseCluster.pearl = userPearl;
//        [self.dataManager save];
//    }
//}




#pragma mark - Other

- (UserExerciseCluster*) exerciseClusterWithID:(int32_t) clusterID forPearl:(Pearl*) pearl {
    
    UserPearl* userPearl = [self _userPearlForPearl:pearl];
    
    NSArray* results = [self.dataManager fetchDataForEntityName:@"UserExerciseCluster" withPredicate:[NSPredicate predicateWithFormat:@"id == %d AND pearl == %@", clusterID, userPearl] sortedBy:nil];
    
    if (results.count > 0) {
        
        return results[0];
    }
    else return nil;
}


- (ExerciseCluster*) exerciseClusterForUserExerciseCluster:(UserExerciseCluster*) userExerciseCluster {

    Lesson* lesson = [[ContentDataManager instance] lessonWithID:userExerciseCluster.pearl.lesson.id];
    Pearl* pearl = [[ContentDataManager instance] pearlForLesson:lesson withID:userExerciseCluster.pearl.id];
    ExerciseCluster* exerciseCluster = [[ContentDataManager instance] exerciseClusterForPearl:pearl withID:userExerciseCluster.id];
    
    return exerciseCluster;
}


- (ExerciseCluster*) mostRecentExerciseClusterForUserLessonForCurrentRun:(Lesson*) lesson {  // can return nil
    
    UserLesson* userLesson = [self _userLessonWithID:lesson.id];
    
    NSArray* results = [self.dataManager fetchDataForEntityName:@"UserExerciseClusterEvent" withPredicate:[NSPredicate predicateWithFormat:@"cluster.pearl.lesson == %@ AND run == %d", userLesson, userLesson.run] sortedBy:@"date", nil];
    
    UserExerciseClusterEvent* mostRecentEvent = results.lastObject;
    ExerciseCluster* exerciseCluster = [self exerciseClusterForUserExerciseCluster:mostRecentEvent.cluster];
    
    return exerciseCluster;
}


- (ExerciseCluster*) mostRecentExerciseClusterForPearlForCurrentRun:(Pearl*) pearl {  // can return nil
 
    UserPearl* userPearl = [self _userPearlForPearl:pearl];
    
    NSArray* results = [self.dataManager fetchDataForEntityName:@"UserExerciseClusterEvent" withPredicate:[NSPredicate predicateWithFormat:@"cluster.pearl == %@ AND run == %d", userPearl, userPearl.lesson.run] sortedBy:@"date", nil];
    
    UserExerciseClusterEvent* mostRecentEvent = results.lastObject;
    ExerciseCluster* exerciseCluster = [self exerciseClusterForUserExerciseCluster:mostRecentEvent.cluster];
    
    return exerciseCluster;
}




#pragma mark - Run

- (NSInteger) runForLesson:(Lesson*) lesson {
    
    UserLesson* userLesson = [self _userLessonWithID:lesson.id];
    
    return userLesson.run;
}


- (NSInteger) runForExerciseCluster:(ExerciseCluster*) exerciseCluster {
    
    UserExerciseCluster* userExerciseCluster = [self _userExerciseClusterForExerciseCluster:exerciseCluster];
    
    return userExerciseCluster.run;
}


- (void) increaseRunForLesson:(Lesson*) lesson {

    UserLesson* userLesson = [self _userLessonWithID:lesson.id];
    
    userLesson.run += 1;
    
    [self.dataManager save];
}




#pragma mark - Current User Lesson

- (UserLesson*) currentUserUserLesson {
    
    UserLesson* userLesson = nil;
    
    NSArray* results = [self.dataManager fetchDataForEntityName:@"UserLesson" withPredicate:[NSPredicate predicateWithFormat:@"isCurrentLesson == YES"] sortedBy:nil];
    
    NSAssert(results.count <= 1, @"");
    
    if (results.count == 1) {
        
        userLesson = results.firstObject;
    }
    else if (results.count == 0) {
        
        userLesson = [self _setDefaultUserLesson];
    }
    
    return userLesson;
}


- (UserLesson*) _setDefaultUserLesson {
    
    NSArray* courses = [[ContentDataManager instance] courses];
    NSArray* lessons = [[ContentDataManager instance] lessonsForCourse:courses.firstObject];
    Lesson* newUserLesson = lessons.firstObject;
    UserLesson* newUserUserLesson = [self _userLessonWithID:newUserLesson.id];
    
    newUserUserLesson.isCurrentLesson = YES;
    [self.dataManager save];
    
    return newUserUserLesson;
}


- (Lesson*) currentUserLesson {
    
    UserLesson* userLesson = [self currentUserUserLesson];
    
    Lesson* lesson = [[ContentDataManager instance] lessonWithID:userLesson.id];
    
    return lesson;
}


- (void) setCurrentUserLesson:(Lesson*) lesson {
    
    UserLesson* currentUserLesson = [self currentUserUserLesson];
    currentUserLesson.isCurrentLesson = NO;
    
    UserLesson* newUserLesson = [self _userLessonWithID:lesson.id];
    newUserLesson.isCurrentLesson = YES;
    
    [self.dataManager save];
}



#pragma mark - private

- (UserCourse*) _userCourseWithID:(int32_t) courseID {
    
    UserCourse* userCourse = nil;
    
    NSArray* results = [self.dataManager fetchDataForEntityName:@"UserCourse" withPredicate:[NSPredicate predicateWithFormat:@"id == %d", courseID] sortedBy:nil];
    
    NSAssert(results.count <= 1, @"");
    
    if (results.count == 0) {
        
        userCourse = [self _createUserCourseWithID:courseID];
        [self.dataManager save];
    }
    else {
        
        userCourse = results.firstObject;
    }
    
    return userCourse;
}


- (UserExerciseCluster*) _userExerciseClusterForExerciseCluster:(ExerciseCluster*) exerciseCluster {
    
    Pearl* pearl = [[ContentDataManager instance] pearlForExerciseCluster:exerciseCluster];
    Lesson* lesson = pearl.lesson;
    
    UserLesson* userLesson = [self _userLessonWithID:lesson.id];
    UserPearl* userPearl = [self _userPearlWithLesson:userLesson id:pearl.id];
    UserExerciseCluster* userExerciseCluster = [self _userExerciseClusterForPearl:userPearl id:exerciseCluster.id];
    
    return userExerciseCluster;
}


- (UserLesson*) _userLessonWithID:(int32_t) lessonID {
    
    UserLesson* userLesson = nil;
    
    NSArray* results = [self.dataManager fetchDataForEntityName:@"UserLesson" withPredicate:[NSPredicate predicateWithFormat:@"id == %d", lessonID] sortedBy:nil];
    
    NSAssert(results.count <= 1, @"");
    
    if (results.count == 0) {
        
        userLesson = [self _createUserLessonWithID:lessonID];
        [self.dataManager save];
    }
    else {
        
        userLesson = results.firstObject;
    }
    
    return userLesson;
}


- (UserPearl*) _userPearlWithLesson:(UserLesson*) userLesson id:(int32_t) pearlID {
    
    UserPearl* userPearl = nil;
    
    NSArray* results = [self.dataManager fetchDataForEntityName:@"UserPearl" withPredicate:[NSPredicate predicateWithFormat:@"lesson == %@ AND id == %d", userLesson, pearlID] sortedBy:nil];
    
    NSAssert(results.count <= 1, @"");
    
    if (results.count == 0) {
        
        userPearl = [self.dataManager insertNewObjectForEntityName:@"UserPearl"];
        userPearl.id = pearlID;
        userPearl.lesson = userLesson;
        [self.dataManager save];
    }
    else {
        
        userPearl = results.firstObject;
    }
    
    return userPearl;
}


- (UserPearl*) _userPearlForPearl:(Pearl*) pearl {
    
    UserLesson* userLesson = [self _userLessonWithID:pearl.lesson.id];
    UserPearl* userPearl = [self _userPearlWithLesson:userLesson id:pearl.id];
    
    return userPearl;
}


- (UserExerciseCluster*) _userExerciseClusterForPearl:(UserPearl*) userPearl id:(int32_t) clusterID {
    
    UserExerciseCluster* userExerciseCluster = nil;
    
    NSArray* results = [self.dataManager fetchDataForEntityName:@"UserExerciseCluster" withPredicate:[NSPredicate predicateWithFormat:@"pearl == %@ AND id == %d", userPearl, clusterID] sortedBy:nil];
    
    NSAssert(results.count <= 1, @"");
    
    if (results.count == 0) {
        
        userExerciseCluster = [self.dataManager insertNewObjectForEntityName:@"UserExerciseCluster"];
        userExerciseCluster.id = clusterID;
        userExerciseCluster.pearl = userPearl;
        [self.dataManager save];
    }
    else {
        
        userExerciseCluster = results.firstObject;
    }
    
    return userExerciseCluster;
}


- (NSArray*) _userPearlsForLesson:(UserLesson*) userLesson {
    
    return [self.dataManager fetchDataForEntityName:@"UserPearl" withPredicate:[NSPredicate predicateWithFormat:@"lesson == %@", userLesson] sortedBy:@"id", nil];
}


- (NSArray*) _userExerciseClustersForLesson:(UserLesson*) userLesson {
    
    NSMutableArray* userExerciseClusters = [NSMutableArray array];
    
    NSArray* userPearls = [self _userPearlsForLesson:userLesson];
    
    for (UserPearl* userPearl in userPearls) {
        
        NSArray* userExerciseClustersForPearl = [self _userExerciseClustersForPearl:userPearl];
        
        [userExerciseClusters addObjectsFromArray:userExerciseClustersForPearl];
    }
    
    return userExerciseClusters;
}


- (NSArray*) _userExerciseClustersForPearl:(UserPearl*) userPearl {
    
    return [self.dataManager fetchDataForEntityName:@"UserExerciseCluster" withPredicate:[NSPredicate predicateWithFormat:@"pearl == %@", userPearl] sortedBy:@"id", nil];
}


- (NSArray*) _userLessonsForCourse:(Course*) course {
    
    NSMutableArray* userLessons = [NSMutableArray array];
    
    NSArray* lessons = [[ContentDataManager instance] lessonsForCourse:course];
    
    for (Lesson* lesson in lessons) {
        
        UserLesson* userLesson = [self _userLessonWithID:lesson.id];
        
        [userLessons addObject:userLesson];
    }
    
    return userLessons;
}


- (NSInteger) _scoreForLessonWithID:(int32_t) lessonID {
    
    UserLesson* userLesson = [self _userLessonWithID:lessonID];
    NSArray* userPearls = [self _userPearlsForLesson:userLesson];
    NSInteger score = 0;
    
    for (UserPearl* userPearl in userPearls) {
        
        NSInteger scoreForPearl = [self _scoreForPearl:userPearl];
        score += scoreForPearl;
    }
    
    return score;
}


- (NSInteger) _scoreForPearl:(UserPearl*) userPearl {
    
    NSArray* userExerciseClusters = [self _userExerciseClustersForPearl:userPearl];
    NSInteger score = 0;
    
    for (UserExerciseCluster* userExerciseCluster in userExerciseClusters) {
        
        NSInteger scoreForCluster = userExerciseCluster.score;
        score += scoreForCluster;
    }
    
    return score;
}





#pragma mark - Create User Entities

- (UserCourse*) _createUserCourseWithID:(int32_t) courseID {
    
    UserCourse* userCourse = [self.dataManager insertNewObjectForEntityName:@"UserCourse"];
    userCourse.id = courseID;
    
    return userCourse;
}


- (UserLesson*) _createUserLessonWithID:(int32_t) lessonID {
    
    UserLesson* userLesson = [self.dataManager insertNewObjectForEntityName:@"UserLesson"];
    userLesson.id = lessonID;
    
    return userLesson;
}


- (UserPearl*) _createUserPearlForPearl:(Pearl*) pearl {
    
    UserPearl* userPearl = [self.dataManager insertNewObjectForEntityName:@"UserPearl"];
    userPearl.id = pearl.id;
    
    return userPearl;
}


- (UserExerciseCluster*) _createUserExerciseClusterForExerciseCluster:(ExerciseCluster*) cluster {
    
    UserExerciseCluster* userExerciseCluster = [self.dataManager insertNewObjectForEntityName:@"UserExerciseCluster"];
    userExerciseCluster.id = cluster.id;
    
    return userExerciseCluster;
}










#pragma mark - Reset

- (void) reset {
    
    NSLog(@"UserDataManager - reset");
    
    
    // reset courses --> clusters
    
    NSArray* courses = [self.dataManager fetchDataForEntityName:@"UserCourse" withPredicate:nil sortedBy:@"id", nil];
    
    for (UserCourse* course in courses) {
        
        // reset course
        
        course.score = 0;
        
        
        NSArray* lessons = [self.dataManager fetchDataForEntityName:@"UserLesson" withPredicate:[NSPredicate predicateWithFormat:@"course == %@", course] sortedBy:@"id", nil];
        
        for (UserLesson* lesson in lessons) {
            
            // reset lesson
            
            lesson.score = 0;
            lesson.run = 1;  // default value
            lesson.isCurrentLesson = NO;
            
            
            NSArray* pearls = [self _userPearlsForLesson:lesson];
            
            for (UserPearl* pearl in pearls) {
                
                // reset pearl
                
                pearl.score = 0;
                
                
                NSArray* clusters = [self _userExerciseClustersForPearl:pearl];
                
                for (UserExerciseCluster* cluster in clusters) {
                    
                    // reset cluster
                    
                    cluster.score = 0;
                    cluster.run = 0;
                }
            }
        }
    }
    
    
    // remove events
    
    NSArray* events = [self.dataManager fetchDataForEntityName:@"UserExerciseClusterEvent" withPredicate:nil sortedBy:nil];
    
    for (UserExerciseClusterEvent* event in events) {
        
        [self.dataManager deleteObject:event];
    }
    
    
    // set default user lesson
    
    [self _setDefaultUserLesson];
    
    
    [self.dataManager save];
}










#pragma mark - TEMP

- (NSArray*) userExerciseClusterEvents {
    
    NSArray* events = [self.dataManager fetchDataForEntityName:@"UserExerciseClusterEvent" withPredicate:nil sortedBy:@"date", nil];
    
    return events;
}



@end
